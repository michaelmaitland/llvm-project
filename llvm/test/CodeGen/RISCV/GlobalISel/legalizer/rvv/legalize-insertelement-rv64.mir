# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=riscv64 -mattr=+v -run-pass=legalizer %s -o - | FileCheck %s

---
name:            insertelement_nxv1i8
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: insertelement_nxv1i8
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 1 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C1]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT]], [[C2]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C2]](s64)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 1 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF1:%[0-9]+]]:_(<vscale x 1 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(s64) = G_ANYEXT [[C]](s32)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT1]], [[C3]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C3]](s64)
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 1 x s8>) = G_SCALAR_MOVE_VL [[DEF1]], [[ASHR1]](s64), $x0
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[ASHR]], [[C4]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 1 x s8>) = G_VSLIDEUP_VL [[DEF]], [[SCALAR_MOVE_VL]], [[ASHR]](s64), [[VMSET_VL]](<vscale x 1 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8 = COPY %3:_(<vscale x 1 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 1 x s8>) = G_IMPLICIT_DEF
    %1:_(s8) = G_CONSTANT i8 0
    %2:_(s8) = G_CONSTANT i8 0
    %3:_(<vscale x 1 x s8>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8 = COPY %3(<vscale x 1 x s8>)
    PseudoRET implicit $v8

...
---
name:            insertelement_nxv2i8
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $v8

    ; CHECK-LABEL: name: insertelement_nxv2i8
    ; CHECK: liveins: $v8
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<vscale x 2 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C1]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT]], [[C2]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C2]](s64)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 2 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF1:%[0-9]+]]:_(<vscale x 2 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(s64) = G_ANYEXT [[C]](s32)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT1]], [[C3]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C3]](s64)
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 2 x s8>) = G_SCALAR_MOVE_VL [[DEF1]], [[ASHR1]](s64), $x0
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[ASHR]], [[C4]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 2 x s8>) = G_VSLIDEUP_VL [[DEF]], [[SCALAR_MOVE_VL]], [[ASHR]](s64), [[VMSET_VL]](<vscale x 2 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8 = COPY %3:_(<vscale x 2 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 2 x s8>) = G_IMPLICIT_DEF
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_CONSTANT i8 1
    %3:_(<vscale x 2 x s8>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8 = COPY %3(<vscale x 2 x s8>)
    PseudoRET implicit $v8

...
---
name:            insertelement_nxv4i8
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $v8
    ; CHECK-LABEL: name: insertelement_nxv4i8
    ; CHECK: liveins: $v8
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<vscale x 4 x s8>) = COPY $v8
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C1]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT]], [[C2]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C2]](s64)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 4 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<vscale x 4 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(s64) = G_ANYEXT [[C]](s32)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT1]], [[C3]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C3]](s64)
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 4 x s8>) = G_SCALAR_MOVE_VL [[DEF]], [[ASHR1]](s64), $x0
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[ASHR]], [[C4]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 4 x s8>) = G_VSLIDEUP_VL [[COPY]], [[SCALAR_MOVE_VL]], [[ASHR]](s64), [[VMSET_VL]](<vscale x 4 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8 = COPY %3:_(<vscale x 4 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 4 x s8>) = COPY $v8
    %1:_(s8) = G_CONSTANT i8 0
    %2:_(s8) = G_CONSTANT i8 0
    %3:_(<vscale x 4 x s8>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8 = COPY %3(<vscale x 4 x s8>)
    PseudoRET implicit $v8

...
---
name:            insertelement_nxv8i8
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $v8
    ; CHECK-LABEL: name: insertelement_nxv8i8
    ; CHECK: liveins: $v8
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<vscale x 8 x s8>) = COPY $v8
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C1]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT]], [[C2]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C2]](s64)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 8 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<vscale x 8 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(s64) = G_ANYEXT [[C]](s32)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT1]], [[C3]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C3]](s64)
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 8 x s8>) = G_SCALAR_MOVE_VL [[DEF]], [[ASHR1]](s64), $x0
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[ASHR]], [[C4]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 8 x s8>) = G_VSLIDEUP_VL [[COPY]], [[SCALAR_MOVE_VL]], [[ASHR]](s64), [[VMSET_VL]](<vscale x 8 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8 = COPY %3:_(<vscale x 8 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 8 x s8>) = COPY $v8
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_CONSTANT i8 1
    %3:_(<vscale x 8 x s8>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8 = COPY %3(<vscale x 8 x s8>)
    PseudoRET implicit $v8

...
---
name:            insertelement_nxv16i8
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $v8m2, $x10, $x11
    ; CHECK-LABEL: name: insertelement_nxv16i8
    ; CHECK: liveins: $v8m2, $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<vscale x 16 x s8>) = COPY $v8m2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY2]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 16 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<vscale x 16 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 16 x s8>) = G_SCALAR_MOVE_VL [[DEF]], [[COPY1]](s64), $x0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[ASHR]], [[C1]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 16 x s8>) = G_VSLIDEUP_VL [[COPY]], [[SCALAR_MOVE_VL]], [[ASHR]](s64), [[VMSET_VL]](<vscale x 16 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8m2 = COPY %5:_(<vscale x 16 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $v8m2
    %0:_(<vscale x 16 x s8>) = COPY $v8m2
    %4:_(s64) = COPY $x10
    %3:_(s64) = COPY $x11
    %1:_(s8) = G_TRUNC %4(s64)
    %2:_(s8) = G_TRUNC %3(s64)
    %5:_(<vscale x 16 x s8>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8m2 = COPY %5(<vscale x 16 x s8>)
    PseudoRET implicit $v8m2

...
---
name:            insertelement_nxv32i8
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $v8m4, $x10, $x11
    ; CHECK-LABEL: name: insertelement_nxv32i8
    ; CHECK: liveins: $v8m4, $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<vscale x 32 x s8>) = COPY $v8m4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY2]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 32 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<vscale x 32 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 32 x s8>) = G_SCALAR_MOVE_VL [[DEF]], [[COPY1]](s64), $x0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[ASHR]], [[C1]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 32 x s8>) = G_VSLIDEUP_VL [[COPY]], [[SCALAR_MOVE_VL]], [[ASHR]](s64), [[VMSET_VL]](<vscale x 32 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8m4 = COPY %5:_(<vscale x 32 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $v8m4
    %0:_(<vscale x 32 x s8>) = COPY $v8m4
    %4:_(s64) = COPY $x10
    %3:_(s64) = COPY $x11
    %1:_(s8) = G_TRUNC %4(s64)
    %2:_(s8) = G_TRUNC %3(s64)
    %5:_(<vscale x 32 x s8>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8m4 = COPY %5(<vscale x 32 x s8>)
    PseudoRET implicit $v8m4

...
---
name:            insertelement_nxv64i8
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: insertelement_nxv64i8
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 64 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C1]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT]], [[C2]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C2]](s64)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 64 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF1:%[0-9]+]]:_(<vscale x 64 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(s64) = G_ANYEXT [[C]](s32)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT1]], [[C3]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C3]](s64)
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 64 x s8>) = G_SCALAR_MOVE_VL [[DEF1]], [[ASHR1]](s64), $x0
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[ASHR]], [[C4]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 64 x s8>) = G_VSLIDEUP_VL [[DEF]], [[SCALAR_MOVE_VL]], [[ASHR]](s64), [[VMSET_VL]](<vscale x 64 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8m8 = COPY %3:_(<vscale x 64 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $v8m8
    %0:_(<vscale x 64 x s8>) = G_IMPLICIT_DEF
    %1:_(s8) = G_CONSTANT i8 0
    %2:_(s8) = G_CONSTANT i8 0
    %3:_(<vscale x 64 x s8>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8m8 = COPY %3(<vscale x 64 x s8>)
    PseudoRET implicit $v8m8
...
---
name:            insertelement_nxv1i16
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: insertelement_nxv1i16
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 1 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C1]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT]], [[C2]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C2]](s64)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 1 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF1:%[0-9]+]]:_(<vscale x 1 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(s64) = G_ANYEXT [[C]](s32)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT1]], [[C3]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C3]](s64)
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 1 x s16>) = G_SCALAR_MOVE_VL [[DEF1]], [[ASHR1]](s64), $x0
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[ASHR]], [[C4]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 1 x s16>) = G_VSLIDEUP_VL [[DEF]], [[SCALAR_MOVE_VL]], [[ASHR]](s64), [[VMSET_VL]](<vscale x 1 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8 = COPY %3:_(<vscale x 1 x s16>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 1 x s16>) = G_IMPLICIT_DEF
    %1:_(s16) = G_CONSTANT i16 0
    %2:_(s16) = G_CONSTANT i16 0
    %3:_(<vscale x 1 x s16>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8 = COPY %3(<vscale x 1 x s16>)
    PseudoRET implicit $v8

...
---
name:            insertelement_nxv2i16
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: insertelement_nxv2i16
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 2 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C1]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT]], [[C2]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C2]](s64)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 2 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF1:%[0-9]+]]:_(<vscale x 2 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(s64) = G_ANYEXT [[C]](s32)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT1]], [[C3]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C3]](s64)
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 2 x s16>) = G_SCALAR_MOVE_VL [[DEF1]], [[ASHR1]](s64), $x0
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[ASHR]], [[C4]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 2 x s16>) = G_VSLIDEUP_VL [[DEF]], [[SCALAR_MOVE_VL]], [[ASHR]](s64), [[VMSET_VL]](<vscale x 2 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8 = COPY %3:_(<vscale x 2 x s16>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 2 x s16>) = G_IMPLICIT_DEF
    %1:_(s16) = G_CONSTANT i16 1
    %2:_(s16) = G_CONSTANT i16 1
    %3:_(<vscale x 2 x s16>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8 = COPY %3(<vscale x 2 x s16>)
    PseudoRET implicit $v8

...
---
name:            insertelement_nxv4i16
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $v8
    ; CHECK-LABEL: name: insertelement_nxv4i16
    ; CHECK: liveins: $v8
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<vscale x 4 x s16>) = COPY $v8
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C1]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT]], [[C2]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C2]](s64)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 4 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<vscale x 4 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(s64) = G_ANYEXT [[C]](s32)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT1]], [[C3]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C3]](s64)
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 4 x s16>) = G_SCALAR_MOVE_VL [[DEF]], [[ASHR1]](s64), $x0
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[ASHR]], [[C4]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 4 x s16>) = G_VSLIDEUP_VL [[COPY]], [[SCALAR_MOVE_VL]], [[ASHR]](s64), [[VMSET_VL]](<vscale x 4 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8 = COPY %3:_(<vscale x 4 x s16>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 4 x s16>) = COPY $v8
    %1:_(s16) = G_CONSTANT i16 0
    %2:_(s16) = G_CONSTANT i16 0
    %3:_(<vscale x 4 x s16>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8 = COPY %3(<vscale x 4 x s16>)
    PseudoRET implicit $v8

...
---
name:            insertelement_nxv8i16
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $v8m2
    ; CHECK-LABEL: name: insertelement_nxv8i16
    ; CHECK: liveins: $v8m2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<vscale x 8 x s16>) = COPY $v8m2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C1]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT]], [[C2]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C2]](s64)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 8 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<vscale x 8 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(s64) = G_ANYEXT [[C]](s32)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT1]], [[C3]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C3]](s64)
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 8 x s16>) = G_SCALAR_MOVE_VL [[DEF]], [[ASHR1]](s64), $x0
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[ASHR]], [[C4]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 8 x s16>) = G_VSLIDEUP_VL [[COPY]], [[SCALAR_MOVE_VL]], [[ASHR]](s64), [[VMSET_VL]](<vscale x 8 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8m2 = COPY %3:_(<vscale x 8 x s16>)
    ; CHECK-NEXT: PseudoRET implicit $v8m2
    %0:_(<vscale x 8 x s16>) = COPY $v8m2
    %1:_(s16) = G_CONSTANT i16 1
    %2:_(s16) = G_CONSTANT i16 1
    %3:_(<vscale x 8 x s16>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8m2 = COPY %3(<vscale x 8 x s16>)
    PseudoRET implicit $v8m2

...
---
name:            insertelement_nxv16i16
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $v8m4, $x10, $x11
    ; CHECK-LABEL: name: insertelement_nxv16i16
    ; CHECK: liveins: $v8m4, $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<vscale x 16 x s16>) = COPY $v8m4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY2]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 16 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<vscale x 16 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 16 x s16>) = G_SCALAR_MOVE_VL [[DEF]], [[COPY1]](s64), $x0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[ASHR]], [[C1]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 16 x s16>) = G_VSLIDEUP_VL [[COPY]], [[SCALAR_MOVE_VL]], [[ASHR]](s64), [[VMSET_VL]](<vscale x 16 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8m4 = COPY %5:_(<vscale x 16 x s16>)
    ; CHECK-NEXT: PseudoRET implicit $v8m4
    %0:_(<vscale x 16 x s16>) = COPY $v8m4
    %4:_(s64) = COPY $x10
    %3:_(s64) = COPY $x11
    %1:_(s16) = G_TRUNC %4(s64)
    %2:_(s16) = G_TRUNC %3(s64)
    %5:_(<vscale x 16 x s16>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8m4 = COPY %5(<vscale x 16 x s16>)
    PseudoRET implicit $v8m4

...
---
name:            insertelement_nxv32i16
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $v8m8, $x10, $x11
    ; CHECK-LABEL: name: insertelement_nxv32i16
    ; CHECK: liveins: $v8m8, $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<vscale x 32 x s16>) = COPY $v8m8
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY2]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 32 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<vscale x 32 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 32 x s16>) = G_SCALAR_MOVE_VL [[DEF]], [[COPY1]](s64), $x0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[ASHR]], [[C1]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 32 x s16>) = G_VSLIDEUP_VL [[COPY]], [[SCALAR_MOVE_VL]], [[ASHR]](s64), [[VMSET_VL]](<vscale x 32 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8m8 = COPY %5:_(<vscale x 32 x s16>)
    ; CHECK-NEXT: PseudoRET implicit $v8m8
    %0:_(<vscale x 32 x s16>) = COPY $v8m8
    %4:_(s64) = COPY $x10
    %3:_(s64) = COPY $x11
    %1:_(s16) = G_TRUNC %4(s64)
    %2:_(s16) = G_TRUNC %3(s64)
    %5:_(<vscale x 32 x s16>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8m8 = COPY %5(<vscale x 32 x s16>)
    PseudoRET implicit $v8m8

...
---
name:            insertelement_nxv1i32
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: insertelement_nxv1i32
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 1 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[SEXT:%[0-9]+]]:_(s64) = G_SEXT [[C1]](s32)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 1 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF1:%[0-9]+]]:_(<vscale x 1 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[SEXT1:%[0-9]+]]:_(s64) = G_SEXT [[C]](s32)
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 1 x s32>) = G_SCALAR_MOVE_VL [[DEF1]], [[SEXT1]](s64), $x0
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[SEXT]], [[C2]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 1 x s32>) = G_VSLIDEUP_VL [[DEF]], [[SCALAR_MOVE_VL]], [[SEXT]](s64), [[VMSET_VL]](<vscale x 1 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8 = COPY %3:_(<vscale x 1 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 1 x s32>) = G_IMPLICIT_DEF
    %1:_(s32) = G_CONSTANT i32 0
    %2:_(s32) = G_CONSTANT i32 0
    %3:_(<vscale x 1 x s32>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8 = COPY %3(<vscale x 1 x s32>)
    PseudoRET implicit $v8

...
---
name:            insertelement_nxv2i32
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: insertelement_nxv2i32
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 2 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[SEXT:%[0-9]+]]:_(s64) = G_SEXT [[C1]](s32)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 2 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF1:%[0-9]+]]:_(<vscale x 2 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[SEXT1:%[0-9]+]]:_(s64) = G_SEXT [[C]](s32)
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 2 x s32>) = G_SCALAR_MOVE_VL [[DEF1]], [[SEXT1]](s64), $x0
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[SEXT]], [[C2]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 2 x s32>) = G_VSLIDEUP_VL [[DEF]], [[SCALAR_MOVE_VL]], [[SEXT]](s64), [[VMSET_VL]](<vscale x 2 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8 = COPY %3:_(<vscale x 2 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 2 x s32>) = G_IMPLICIT_DEF
    %1:_(s32) = G_CONSTANT i32 1
    %2:_(s32) = G_CONSTANT i32 1
    %3:_(<vscale x 2 x s32>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8 = COPY %3(<vscale x 2 x s32>)
    PseudoRET implicit $v8

...
---
name:            insertelement_nxv4i32
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $v8m2
    ; CHECK-LABEL: name: insertelement_nxv4i32
    ; CHECK: liveins: $v8m2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<vscale x 4 x s32>) = COPY $v8m2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[SEXT:%[0-9]+]]:_(s64) = G_SEXT [[C1]](s32)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 4 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<vscale x 4 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[SEXT1:%[0-9]+]]:_(s64) = G_SEXT [[C]](s32)
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 4 x s32>) = G_SCALAR_MOVE_VL [[DEF]], [[SEXT1]](s64), $x0
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[SEXT]], [[C2]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 4 x s32>) = G_VSLIDEUP_VL [[COPY]], [[SCALAR_MOVE_VL]], [[SEXT]](s64), [[VMSET_VL]](<vscale x 4 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8m2 = COPY %3:_(<vscale x 4 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $v8m2
    %0:_(<vscale x 4 x s32>) = COPY $v8m2
    %1:_(s32) = G_CONSTANT i32 0
    %2:_(s32) = G_CONSTANT i32 0
    %3:_(<vscale x 4 x s32>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8m2 = COPY %3(<vscale x 4 x s32>)
    PseudoRET implicit $v8m2

...
---
name:            insertelement_nxv8i32
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $v8m4
    ; CHECK-LABEL: name: insertelement_nxv8i32
    ; CHECK: liveins: $v8m4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<vscale x 8 x s32>) = COPY $v8m4
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[SEXT:%[0-9]+]]:_(s64) = G_SEXT [[C1]](s32)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 8 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<vscale x 8 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[SEXT1:%[0-9]+]]:_(s64) = G_SEXT [[C]](s32)
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 8 x s32>) = G_SCALAR_MOVE_VL [[DEF]], [[SEXT1]](s64), $x0
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[SEXT]], [[C2]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 8 x s32>) = G_VSLIDEUP_VL [[COPY]], [[SCALAR_MOVE_VL]], [[SEXT]](s64), [[VMSET_VL]](<vscale x 8 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8m4 = COPY %3:_(<vscale x 8 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $v8m4
    %0:_(<vscale x 8 x s32>) = COPY $v8m4
    %1:_(s32) = G_CONSTANT i32 1
    %2:_(s32) = G_CONSTANT i32 1
    %3:_(<vscale x 8 x s32>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8m4 = COPY %3(<vscale x 8 x s32>)
    PseudoRET implicit $v8m4

...
---
name:            insertelement_nxv16i32
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $v8m8, $x10, $x11
    ; CHECK-LABEL: name: insertelement_nxv16i32
    ; CHECK: liveins: $v8m8, $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<vscale x 16 x s32>) = COPY $v8m8
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY2]], 32
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 16 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<vscale x 16 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 16 x s32>) = G_SCALAR_MOVE_VL [[DEF]], [[COPY1]](s64), $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[SEXT_INREG]], [[C]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 16 x s32>) = G_VSLIDEUP_VL [[COPY]], [[SCALAR_MOVE_VL]], [[SEXT_INREG]](s64), [[VMSET_VL]](<vscale x 16 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8m8 = COPY %5:_(<vscale x 16 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $v8m8
    %0:_(<vscale x 16 x s32>) = COPY $v8m8
    %4:_(s64) = COPY $x10
    %3:_(s64) = COPY $x11
    %1:_(s32) = G_TRUNC %4(s64)
    %2:_(s32) = G_TRUNC %3(s64)
    %5:_(<vscale x 16 x s32>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8m8 = COPY %5(<vscale x 16 x s32>)
    PseudoRET implicit $v8m8

...
---
name:            insertelement_nxv1i64
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: insertelement_nxv1i64
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 1 x s64>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 1 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 1 x s64>) = G_SCALAR_MOVE_VL [[DEF]], [[C]](s64), $x0
    ; CHECK-NEXT: $v8 = COPY %3:_(<vscale x 1 x s64>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 1 x s64>) = G_IMPLICIT_DEF
    %1:_(s64) = G_CONSTANT i64 0
    %2:_(s64) = G_CONSTANT i64 0
    %3:_(<vscale x 1 x s64>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8 = COPY %3(<vscale x 1 x s64>)
    PseudoRET implicit $v8

...
---
name:            insertelement_nxv2i64
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: insertelement_nxv2i64
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 2 x s64>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 1 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF1:%[0-9]+]]:_(<vscale x 1 x s64>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 1 x s64>) = G_SCALAR_MOVE_VL [[DEF1]], [[C]](s64), $x0
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 2
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 1 x s64>) = G_VSLIDEUP_VL [[DEF]], [[SCALAR_MOVE_VL]], [[C1]](s64), [[VMSET_VL]](<vscale x 1 x s1>), [[C2]](s64), 0
    ; CHECK-NEXT: $v8m2 = COPY %3:_(<vscale x 2 x s64>)
    ; CHECK-NEXT: PseudoRET implicit $v8m2
    %0:_(<vscale x 2 x s64>) = G_IMPLICIT_DEF
    %1:_(s64) = G_CONSTANT i64 1
    %2:_(s64) = G_CONSTANT i64 1
    %3:_(<vscale x 2 x s64>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8m2 = COPY %3(<vscale x 2 x s64>)
    PseudoRET implicit $v8m2

...
---
name:            insertelement_nxv4i64
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $v8m4
    ; CHECK-LABEL: name: insertelement_nxv4i64
    ; CHECK: liveins: $v8m4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<vscale x 4 x s64>) = COPY $v8m4
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 1 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 1 x s64>) = G_SCALAR_MOVE_VL [[COPY]], [[C]](s64), $x0
    ; CHECK-NEXT: $v8m4 = COPY %3:_(<vscale x 4 x s64>)
    ; CHECK-NEXT: PseudoRET implicit $v8m4
    %0:_(<vscale x 4 x s64>) = COPY $v8m4
    %1:_(s64) = G_CONSTANT i64 0
    %2:_(s64) = G_CONSTANT i64 0
    %3:_(<vscale x 4 x s64>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8m4 = COPY %3(<vscale x 4 x s64>)
    PseudoRET implicit $v8m4

...
---
name:            insertelement_nxv8i64
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $v8m8

    ; CHECK-LABEL: name: insertelement_nxv8i64
    ; CHECK: liveins: $v8m8
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<vscale x 8 x s64>) = COPY $v8m8
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 1 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<vscale x 1 x s64>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 1 x s64>) = G_SCALAR_MOVE_VL [[DEF]], [[C]](s64), $x0
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 2
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 1 x s64>) = G_VSLIDEUP_VL [[COPY]], [[SCALAR_MOVE_VL]], [[C1]](s64), [[VMSET_VL]](<vscale x 1 x s1>), [[C2]](s64), 0
    ; CHECK-NEXT: $v8m8 = COPY %3:_(<vscale x 8 x s64>)
    ; CHECK-NEXT: PseudoRET implicit $v8m8
    %0:_(<vscale x 8 x s64>) = COPY $v8m8
    %1:_(s64) = G_CONSTANT i64 1
    %2:_(s64) = G_CONSTANT i64 1
    %3:_(<vscale x 8 x s64>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8m8 = COPY %3(<vscale x 8 x s64>)
    PseudoRET implicit $v8m8

...
---
name:            insertelement_nxv8i64_2
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $v8m8, $x10, $x11

    ; CHECK-LABEL: name: insertelement_nxv8i64_2
    ; CHECK: liveins: $v8m8, $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<vscale x 8 x s64>) = COPY $v8m8
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 8 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<vscale x 8 x s64>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 8 x s64>) = G_SCALAR_MOVE_VL [[DEF]], [[COPY1]](s64), $x0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[COPY2]], [[C]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 8 x s64>) = G_VSLIDEUP_VL [[COPY]], [[SCALAR_MOVE_VL]], [[COPY2]](s64), [[VMSET_VL]](<vscale x 8 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8m8 = COPY %3:_(<vscale x 8 x s64>)
    ; CHECK-NEXT: PseudoRET implicit $v8m8
    %0:_(<vscale x 8 x s64>) = COPY $v8m8
    %1:_(s64) = COPY $x10
    %2:_(s64) = COPY $x11
    %5:_(<vscale x 8 x s64>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8m8 = COPY %5(<vscale x 8 x s64>)
    PseudoRET implicit $v8m8
...

# These tests check the legalization of a G_INSERT_VECTOR_ELT whose scalar element
# operand is G_EXTRACT_VECTOR_ELT that has an index operand of zero.
---
name:            insertelement_nxv4i8_extractelement_from_same_vector
legalized:       false
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $v8
    ; CHECK-LABEL: name: insertelement_nxv4i8_extractelement_from_same_vector
    ; CHECK: liveins: $v8
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<vscale x 4 x s8>) = COPY $v8
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[EVEC:%[0-9]+]]:_(s8) = G_EXTRACT_VECTOR_ELT [[COPY]](<vscale x 4 x s8>), [[TRUNC]](s8)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C1]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT]], [[C2]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C2]](s64)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 4 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<vscale x 4 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[INSERT:%[0-9]+]]:_(<vscale x 4 x s8>) = G_INSERT [[DEF]], [[EVEC]](s8), 0
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[ASHR]], [[C3]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 4 x s8>) = G_VSLIDEUP_VL [[COPY]], [[INSERT]], [[ASHR]](s64), [[VMSET_VL]](<vscale x 4 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8 = COPY %4:_(<vscale x 4 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 4 x s8>) = COPY $v8
    %1:_(s8) = G_CONSTANT i8 0
    %2:_(s8) = G_CONSTANT i8 1
    %3:_(s8) = G_EXTRACT_VECTOR_ELT %0, %1
    %4:_(<vscale x 4 x s8>) = G_INSERT_VECTOR_ELT %0, %3, %2
    $v8 = COPY %4(<vscale x 4 x s8>)
    PseudoRET implicit $v8
...
---
name:            insertelement_nxv4i8_extractelement_from_same_vector_type
legalized:       false
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $v8
    ; CHECK-LABEL: name: insertelement_nxv4i8_extractelement_from_same_vector_type
    ; CHECK: liveins: $v8
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<vscale x 4 x s8>) = COPY $v8
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<vscale x 4 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[EVEC:%[0-9]+]]:_(s8) = G_EXTRACT_VECTOR_ELT [[COPY]](<vscale x 4 x s8>), [[TRUNC]](s8)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C1]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT]], [[C2]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C2]](s64)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 4 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF1:%[0-9]+]]:_(<vscale x 4 x s8>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[INSERT:%[0-9]+]]:_(<vscale x 4 x s8>) = G_INSERT [[DEF1]], [[EVEC]](s8), 0
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[ASHR]], [[C3]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 4 x s8>) = G_VSLIDEUP_VL [[DEF]], [[INSERT]], [[ASHR]](s64), [[VMSET_VL]](<vscale x 4 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8 = COPY %5:_(<vscale x 4 x s8>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 4 x s8>) = COPY $v8
    %1:_(<vscale x 4 x s8>) = G_IMPLICIT_DEF
    %2:_(s8) = G_CONSTANT i8 0
    %3:_(s8) = G_CONSTANT i8 1
    %4:_(s8) = G_EXTRACT_VECTOR_ELT %0, %2
    %5:_(<vscale x 4 x s8>) = G_INSERT_VECTOR_ELT %1, %4, %3
    $v8 = COPY %5(<vscale x 4 x s8>)
    PseudoRET implicit $v8
...
---
name:            insertelement_nxv2i16_extractelement_from_smaller_vector_type
legalized:       false
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $v8
    ; CHECK-LABEL: name: insertelement_nxv2i16_extractelement_from_smaller_vector_type
    ; CHECK: liveins: $v8
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<vscale x 1 x s16>) = COPY $v8
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<vscale x 2 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[EVEC:%[0-9]+]]:_(s8) = G_EXTRACT_VECTOR_ELT [[COPY]](<vscale x 1 x s16>), [[TRUNC]](s16)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C1]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[ANYEXT]], [[C2]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C2]](s64)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 2 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF1:%[0-9]+]]:_(<vscale x 2 x s16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[INSERT:%[0-9]+]]:_(<vscale x 2 x s16>) = G_INSERT [[DEF1]], [[EVEC]](s8), 0
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[ASHR]], [[C3]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 2 x s16>) = G_VSLIDEUP_VL [[DEF]], [[INSERT]], [[ASHR]](s64), [[VMSET_VL]](<vscale x 2 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8 = COPY %5:_(<vscale x 2 x s16>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 1 x s16>) = COPY $v8
    %1:_(<vscale x 2 x s16>) = G_IMPLICIT_DEF
    %2:_(s16) = G_CONSTANT i16 0
    %3:_(s16) = G_CONSTANT i16 1
    %4:_(s8) = G_EXTRACT_VECTOR_ELT %0, %2
    %5:_(<vscale x 2 x s16>) = G_INSERT_VECTOR_ELT %1, %4, %3
    $v8 = COPY %5(<vscale x 2 x s16>)
    PseudoRET implicit $v8
...
---
name:            insertelement_nxv2i32_extractelement_from_larger_vector_type
legalized:       false
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $v8
    ; CHECK-LABEL: name: insertelement_nxv2i32_extractelement_from_larger_vector_type
    ; CHECK: liveins: $v8
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<vscale x 4 x s32>) = COPY $v8
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<vscale x 2 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[SEXT:%[0-9]+]]:_(s64) = G_SEXT [[C]](s32)
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 2 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[EXTRACT:%[0-9]+]]:_(<vscale x 2 x s32>) = G_EXTRACT [[COPY]](<vscale x 4 x s32>), 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[SEXT]], [[C1]]
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 2 x s32>) = G_VSLIDEUP_VL [[DEF]], [[EXTRACT]], [[SEXT]](s64), [[VMSET_VL]](<vscale x 2 x s1>), [[ADD]](s64), 0
    ; CHECK-NEXT: $v8 = COPY %5:_(<vscale x 2 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $v8
    %0:_(<vscale x 4 x s32>) = COPY $v8
    %1:_(<vscale x 2 x s32>) = G_IMPLICIT_DEF
    %2:_(s32) = G_CONSTANT i32 0
    %3:_(s32) = G_CONSTANT i32 1
    %4:_(s8) = G_EXTRACT_VECTOR_ELT %0, %2
    %5:_(<vscale x 2 x s32>) = G_INSERT_VECTOR_ELT %1, %4, %3
    $v8 = COPY %5(<vscale x 2 x s32>)
    PseudoRET implicit $v8
...
