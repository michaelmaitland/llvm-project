# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
# RUN: llc -mtriple=riscv64 -mattr=+v -run-pass=legalizer %s -o - | FileCheck %s

--- |
  define <vscale x 4 x i32> @insertelement_nxv4i32_known_vlen() #0 {
    %a = insertelement <vscale x 4 x i32> poison, i32 0, i64 3
    ret <vscale x 4 x i32> %a
  }
  define <vscale x 8 x i64> @insertelement_nxv8i64_known_vlen() #0 {
    %a = insertelement <vscale x 8 x i64> poison, i64 0, i64 7
    ret <vscale x 8 x i64> %a
  }
  attributes #0 = { vscale_range(2,2) }
...
---
name:            insertelement_nxv4i32_known_vlen
legalized:       false
tracksRegLiveness: true
body:             |
  bb.1 (%ir-block.0):
    ; CHECK-LABEL: name: insertelement_nxv4i32_known_vlen
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 4 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 3
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 2 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF1:%[0-9]+]]:_(<vscale x 2 x s32>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[SEXT:%[0-9]+]]:_(s64) = G_SEXT [[C]](s32)
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 2 x s32>) = G_SCALAR_MOVE_VL [[DEF1]], [[SEXT]](s64), $x0
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 4
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 2 x s32>) = G_VSLIDEUP_VL [[DEF]], [[SCALAR_MOVE_VL]], [[C1]](s64), [[VMSET_VL]](<vscale x 2 x s1>), [[C2]](s64), 0
    ; CHECK-NEXT: $v8m2 = COPY %3:_(<vscale x 4 x s32>)
    ; CHECK-NEXT: PseudoRET implicit $v8m2
    %0:_(<vscale x 4 x s32>) = G_IMPLICIT_DEF
    %1:_(s32) = G_CONSTANT i32 0
    %2:_(s64) = G_CONSTANT i64 3
    %3:_(<vscale x 4 x s32>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8m2 = COPY %3(<vscale x 4 x s32>)
    PseudoRET implicit $v8m2
...
---
name:            insertelement_nxv8i64_known_vlen
legalized:       false
tracksRegLiveness: true
body:             |
  bb.1 (%ir-block.0):
    ; CHECK-LABEL: name: insertelement_nxv8i64_known_vlen
    ; CHECK: [[DEF:%[0-9]+]]:_(<vscale x 8 x s64>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[EXTRACT:%[0-9]+]]:_(<vscale x 1 x s64>) = G_EXTRACT [[DEF]](<vscale x 8 x s64>), 3
    ; CHECK-NEXT: [[VMSET_VL:%[0-9]+]]:_(<vscale x 1 x s1>) = G_VMSET_VL $x0
    ; CHECK-NEXT: [[DEF1:%[0-9]+]]:_(<vscale x 1 x s64>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[SCALAR_MOVE_VL:%[0-9]+]]:_(<vscale x 1 x s64>) = G_SCALAR_MOVE_VL [[DEF1]], [[C]](s64), $x0
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 2
    ; CHECK-NEXT: [[VSLIDEUP_VL:%[0-9]+]]:_(<vscale x 1 x s64>) = G_VSLIDEUP_VL [[EXTRACT]], [[SCALAR_MOVE_VL]], [[C1]](s64), [[VMSET_VL]](<vscale x 1 x s1>), [[C2]](s64), 0
    ; CHECK-NEXT: [[INSERT:%[0-9]+]]:_(<vscale x 8 x s64>) = G_INSERT [[EXTRACT]], [[VSLIDEUP_VL]](<vscale x 1 x s64>), 3
    ; CHECK-NEXT: $v8m8 = COPY [[INSERT]](<vscale x 8 x s64>)
    ; CHECK-NEXT: PseudoRET implicit $v8m8
    %0:_(<vscale x 8 x s64>) = G_IMPLICIT_DEF
    %1:_(s64) = G_CONSTANT i64 0
    %2:_(s64) = G_CONSTANT i64 7
    %3:_(<vscale x 8 x s64>) = G_INSERT_VECTOR_ELT %0, %1, %2
    $v8m8 = COPY %3(<vscale x 8 x s64>)
    PseudoRET implicit $v8m8
...



